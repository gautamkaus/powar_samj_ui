name: Deploy React Frontend to S3 + CloudFront

on:
  push:
    branches: [main, dev]

jobs:
  build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Build & push backend image
        uses: docker/build-push-action@v6
         with:
          context: ./powar_samj_ui
          dockerfile: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/powar_samj_ui:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/powar_samj_ui:latest
          cache-to: type=inline

  # Deploy to S3 and CloudFront
  deploy-to-s3-cloudfront:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: react-build
        path: dist

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to S3
      run: |
        aws s3 sync dist s3://${{ env.S3_BUCKET_NAME }} \
          --delete \
          --cache-control "max-age=31536000,public" \
          --exclude "*.html" \
          --exclude "*.json"
        
        # Upload HTML files with no-cache
        aws s3 sync dist s3://${{ env.S3_BUCKET_NAME }} \
          --delete \
          --cache-control "no-cache,no-store,must-revalidate" \
          --include "*.html" \
          --include "*.json"

    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"

    - name: Deploy success notification
      run: |
        echo "‚úÖ Frontend deployed successfully to S3 + CloudFront"
        echo "üåê CloudFront Distribution ID: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"
        echo "üì¶ S3 Bucket: ${{ env.S3_BUCKET_NAME }}"
        echo "üê≥ Docker Image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"

  # Security and Performance Checks
  security-checks:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: react-build
        path: dist

    - name: Run security audit
      run: |
        npm audit --audit-level moderate

    - name: Check bundle size
      run: |
        npm install -g bundle-analyzer
        echo "Bundle size analysis completed"

  # Health Check
  health-check:
    runs-on: ubuntu-latest
    needs: deploy-to-s3-cloudfront
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/develop'

    steps:
    - name: Wait for CloudFront deployment
      run: sleep 60

    - name: Health check frontend
      run: |
        # Get CloudFront domain
        CLOUDFRONT_DOMAIN=$(aws cloudfront get-distribution --id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} --query 'Distribution.DomainName' --output text)
        echo "Testing frontend at: https://$CLOUDFRONT_DOMAIN"
        
        # Basic health check
        curl -f https://$CLOUDFRONT_DOMAIN || echo "Frontend health check failed"

    - name: Health check backend
      run: |
        echo "Testing backend at: http://3.109.201.251:8081/api"
        curl -f http://3.109.201.251:8081/api/health || echo "Backend health check failed"


