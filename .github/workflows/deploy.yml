name: Deploy React Frontend to S3 + CloudFront

on:
  push:
    branches: [ main, master, dev, develop ]
    paths:
      - 'powar_samj_ui/**'
      - '.github/workflows/deploy.yml'
      - 'package.json'
      - 'package-lock.json'
      - 'vite.config.ts'
      - 'tsconfig.json'
  pull_request:
    branches: [ main, master, dev ]
    paths:
      - 'powar_samj_ui/**'
  workflow_dispatch: # Allow manual trigger

env:
  AWS_REGION: us-east-1
  DOCKER_IMAGE_NAME: pawar-samaj-frontend
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

jobs:
  # Build and Test React App
  build-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./powar_samj_ui

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './powar_samj_ui/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Build React app
      run: npm run build
      env:
        VITE_API_BASE_URL: 'http://3.109.201.251:8081/api'

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: react-build
        path: ./powar_samj_ui/dist
        retention-days: 1

  # Build and Push Docker Image
  build-docker:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: react-build
        path: ./powar_samj_ui/dist

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./powar_samj_ui
        file: ./powar_samj_ui/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to S3 and CloudFront
  deploy-to-s3-cloudfront:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: react-build
        path: ./powar_samj_ui/dist

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to S3
      run: |
        aws s3 sync ./powar_samj_ui/dist s3://${{ env.S3_BUCKET_NAME }} \
          --delete \
          --cache-control "max-age=31536000,public" \
          --exclude "*.html" \
          --exclude "*.json"
        
        # Upload HTML files with no-cache
        aws s3 sync ./powar_samj_ui/dist s3://${{ env.S3_BUCKET_NAME }} \
          --delete \
          --cache-control "no-cache,no-store,must-revalidate" \
          --include "*.html" \
          --include "*.json"

    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"

    - name: Deploy success notification
      run: |
        echo "‚úÖ Frontend deployed successfully to S3 + CloudFront"
        echo "üåê CloudFront Distribution ID: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"
        echo "üì¶ S3 Bucket: ${{ env.S3_BUCKET_NAME }}"
        echo "üê≥ Docker Image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"

  # Security and Performance Checks
  security-checks:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: react-build
        path: ./powar_samj_ui/dist

    - name: Run security audit
      run: |
        cd powar_samj_ui
        npm audit --audit-level moderate

    - name: Check bundle size
      run: |
        cd powar_samj_ui
        npm install -g bundle-analyzer
        echo "Bundle size analysis completed"

  # Health Check
  health-check:
    runs-on: ubuntu-latest
    needs: deploy-to-s3-cloudfront
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/develop'

    steps:
    - name: Wait for CloudFront deployment
      run: sleep 60

    - name: Health check frontend
      run: |
        # Get CloudFront domain
        CLOUDFRONT_DOMAIN=$(aws cloudfront get-distribution --id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} --query 'Distribution.DomainName' --output text)
        echo "Testing frontend at: https://$CLOUDFRONT_DOMAIN"
        
        # Basic health check
        curl -f https://$CLOUDFRONT_DOMAIN || echo "Frontend health check failed"

    - name: Health check backend
      run: |
        echo "Testing backend at: http://3.109.201.251:8081/api"
        curl -f http://3.109.201.251:8081/api/health || echo "Backend health check failed"


