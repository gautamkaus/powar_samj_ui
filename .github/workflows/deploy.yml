name: Deploy React Frontend to S3 + CloudFront

on:
  push:
    branches:
      - main   # Runs only when pushing to main branch
      - dev

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 3. Build and push Docker image
      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/pawar-samaj-ui:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/pawar-samaj-ui:${{ github.sha }}

  # Deploy to S3 and CloudFront
  deploy-to-s3-cloudfront:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: react-build
        path: dist

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to S3
      run: |
        aws s3 sync dist s3://${{ env.S3_BUCKET_NAME }} \
          --delete \
          --cache-control "max-age=31536000,public" \
          --exclude "*.html" \
          --exclude "*.json"

        # Upload HTML files with no-cache
        aws s3 sync dist s3://${{ env.S3_BUCKET_NAME }} \
          --delete \
          --cache-control "no-cache,no-store,must-revalidate" \
          --include "*.html" \
          --include "*.json"

    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"

    - name: Deploy success notification
      run: |
        echo "‚úÖ Frontend deployed successfully to S3 + CloudFront"
        echo "üåê CloudFront Distribution ID: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"
        echo "üì¶ S3 Bucket: ${{ env.S3_BUCKET_NAME }}"
        echo "üê≥ Docker Image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
